---
- name: fix the scenario {{ scenario }} on compute nodes
  become: true
  shell: |
    ovs-ofctl del-flows br-int
      systemctl restart {{ ovn_controller_service_name }}
  when: (installer == 'tripleo' and inventory_hostname in groups[compute_group_name]) or installer == 'podified'

- name: re-create the VM for the scenario {{ scenario }}
  shell: |
    {{ osp_get_credentials_cmd }}

    fip=$({{ oc_osp_cmd }} openstack floating ip list --port $({{ oc_osp_cmd }} openstack port list --server scenario-{{ scenario }}-vm -c ID -f value | head -n1) -c "Floating IP Address" -f value)
    {{ oc_osp_cmd }} openstack server delete scenario-{{ scenario }}-vm
    {{ oc_osp_cmd }} openstack server create --flavor m1.medium --image {{ image_name }} --nic net-id=scenario-{{ scenario }}-network --key-name scenario-{{ scenario }}-key --security-group scenario-{{ scenario }}-sg scenario-{{ scenario }}-vm --wait
    port_id=$({{ oc_osp_cmd }} openstack port list --server scenario-{{ scenario }}-vm -c ID -f value | head)
    {{ oc_osp_cmd }} openstack floating ip set --port $port_id $fip
    echo $fip
  when: (installer == 'tripleo' and inventory_hostname in groups['Undercloud']) or installer == 'podified'
  delegate_to: "{{ '127.0.0.1' if installer == 'podified' else ansible_hostname }}"
  register: fip

- name: wait for the VM to come up
  wait_for:
    host={{ fip.stdout_lines[-1] }}
    port=22
    delay=10
  when: (installer == 'tripleo' and inventory_hostname in groups['Undercloud']) or installer == 'podified'
  delegate_to: "{{ '127.0.0.1' if installer == 'podified' else ansible_hostname }}"
