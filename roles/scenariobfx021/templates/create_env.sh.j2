#!/bin/bash

set -e

OC_COMMAND="{{ oc_osp_cmd }}"
{{ osp_get_credentials_cmd }}

if ! $OC_COMMAND openstack network show {{ public_network }} > /dev/null 2> /dev/null; then
    $OC_COMMAND openstack network create --external --provider-network-type flat --provider-physical-network datacentre {{ public_network }}
    $OC_COMMAND openstack subnet create --no-dhcp --gateway {{ public_network_gw_ip }} --network {{ public_network }} --subnet-range {{ public_network_subnet_range }} --allocation-pool start={{ public_network_ip_allocation_start }},end={{ public_network_ip_allocation_end }} {{ public_network }}_subnet
fi

if ! $OC_COMMAND openstack image show {{ image_name }} > /dev/null 2> /dev/null; then
    # Create Cirros image
    if [ ! -f {{ image_file_name }} ]; then
        curl -L {{ image_url }} > {{ image_file_name }}
    fi
    $OC_COMMAND openstack image create {{ image_name }} --disk-format qcow2 --container-format bare --public < {{ image_file_name }}
fi

network_id=$($OC_COMMAND openstack network create scenario-{{ scenario }}-network | awk '/^\| id/{ print $4 }')

$OC_COMMAND openstack subnet create --network scenario-{{ scenario }}-network scenario-{{ scenario }}-subnet --subnet-range 192.168.140.0/24

$OC_COMMAND openstack router create scenario-{{ scenario }}-router

$OC_COMMAND openstack router set --enable-snat --external-gateway {{ public_network }} scenario-{{ scenario }}-router
$OC_COMMAND openstack router add subnet scenario-{{ scenario }}-router scenario-{{ scenario }}-subnet

$OC_COMMAND openstack flavor show m1.small > /dev/null 2> /dev/null || $OC_COMMAND openstack flavor create m1.small --disk 1 --vcpus 1 --ram 512

$OC_COMMAND openstack security group create scenario-{{ scenario }}-sg
$OC_COMMAND openstack security group rule create --ingress --protocol icmp scenario-{{ scenario }}-sg
$OC_COMMAND openstack security group rule create --ingress --protocol tcp --dst-port 22 scenario-{{ scenario }}-sg

# TODO(slaweq): We can revert that to use OSC to generate ssh keys for us once
#   we will be using python-openstackclient >= 6.3.0 which contains patch
#   https://review.opendev.org/c/openstack/python-openstackclient/+/881822
if type ssh-keygen > /dev/null 2>&1; then
    yes | ssh-keygen -t ecdsa -f {{ ssh_key_file }} -N "" > /dev/null
    {{ oc_bin }} -n {{ oc_namespace }} cp {{ ssh_key_file }}.pub openstackclient:/tmp/ssh_key.pub
    $OC_COMMAND openstack keypair create --public-key /tmp/ssh_key.pub scenario-{{ scenario }}-key
else
    $OC_COMMAND openstack keypair create scenario-{{ scenario }}-key > {{ ssh_key_file }}
    chmod 0600 {{ ssh_key_file }}
fi

$OC_COMMAND openstack port delete $($OC_COMMAND openstack port list --device-id=ovnmeta-$network_id -f value -c ID)

$OC_COMMAND openstack server create --flavor m1.small --image {{ image_name }} --nic net-id=scenario-{{ scenario }}-network --key-name scenario-{{ scenario }}-key --security-group scenario-{{ scenario }}-sg scenario-{{ scenario }}-vm --wait
$OC_COMMAND openstack server show scenario-{{ scenario }}-vm | grep -q "status.*ACTIVE"

port_id=$($OC_COMMAND openstack port list --server scenario-{{ scenario }}-vm -c ID -f value | head)
fip=$($OC_COMMAND openstack floating ip create --port $port_id {{ public_network }} | awk '/floating_ip_address/{ print $4 }')

echo "$fip"
