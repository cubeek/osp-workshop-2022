#!/bin/bash

set -e

{{ osp_get_credentials_cmd }}

if ! {{ oc_osp_cmd }} openstack network show {{ public_network }} > /dev/null 2> /dev/null; then
    {{ oc_osp_cmd }} openstack network create --external --provider-network-type flat --provider-physical-network datacentre {{ public_network }}
fi
if ! {{ oc_osp_cmd }} openstack subnet show {{ public_network }}_subnet > /dev/null 2> /dev/null; then
    {{ oc_osp_cmd }} openstack subnet create --no-dhcp --gateway {{ public_network_gw_ip }} --network {{ public_network }} --subnet-range {{ public_network_subnet_range }} --allocation-pool start={{ public_network_ip_allocation_start }},end={{ public_network_ip_allocation_end }} {{ public_network }}_subnet
fi

{{ oc_osp_cmd }} openstack subnet set --no-dhcp $({{ oc_osp_cmd }} openstack subnet list --network {{ public_network }} --ip-version 4 -c ID -f value | head -n1)

if ! {{ oc_osp_cmd }} openstack image show {{ image_name }} > /dev/null 2> /dev/null; then
    # Create Cirros image
    if [ ! -f {{ image_file_name }} ]; then
        curl -L {{ image_url }} > {{ image_file_name }}
    fi
    {{ oc_osp_cmd }} openstack image create {{ image_name }} --disk-format qcow2 --container-format bare --public < {{ image_file_name }}
fi

{{ oc_osp_cmd }} openstack flavor show m1.small > /dev/null 2> /dev/null || {{ oc_osp_cmd }} openstack flavor create m1.small --disk 1 --vcpus 1 --ram 512

{{ oc_osp_cmd }} openstack security group create scenario-{{ scenario }}-sg
{{ oc_osp_cmd }} openstack security group rule create --ingress --protocol icmp scenario-{{ scenario }}-sg
{{ oc_osp_cmd }} openstack security group rule create --ingress --protocol tcp --dst-port 22 scenario-{{ scenario }}-sg

# TODO(slaweq): We can revert that to use OSC to generate ssh keys for us once
#   we will be using python-openstackclient >= 6.3.0 which contains patch
#   https://review.opendev.org/c/openstack/python-openstackclient/+/881822
if type ssh-keygen > /dev/null 2>&1; then
    yes | ssh-keygen -t ecdsa -f {{ ssh_key_file }} -N "" > /dev/null
    {{ oc_bin }} -n {{ oc_namespace }} cp {{ ssh_key_file }}.pub openstackclient:/tmp/ssh_key.pub
    {{ oc_osp_cmd }} openstack keypair create --public-key /tmp/ssh_key.pub scenario-{{ scenario }}-key
else
    {{ oc_osp_cmd }} openstack keypair create scenario-{{ scenario }}-key > {{ ssh_key_file }}
    chmod 0600 {{ ssh_key_file }}
fi

address=$({{ oc_osp_cmd }} openstack server create --flavor m1.small --image {{ image_name }} --nic net-id={{ public_network }} --key-name scenario-{{ scenario }}-key --security-group scenario-{{ scenario }}-sg scenario-{{ scenario }}-vm --wait | grep "^| addresses" | sed 's/.*{{ public_network }}=\([0-9\.]*\).*/\1/')
{{ oc_osp_cmd }} openstack server show scenario-{{ scenario }}-vm | grep -q "status.*ACTIVE"

echo "$address"
