#!/bin/bash

set -e

source {{ overcloudrc_file }}

if ! openstack image show cirros-0.5.2-x86_64 > /dev/null 2> /dev/null; then
    # Create Cirros image
    curl -L http://download.cirros-cloud.net/0.5.2/cirros-0.5.2-x86_64-disk.img > cirros-0.5.2-x86_64-disk.img
    openstack image create cirros-0.5.2-x86_64 --file cirros-0.5.2-x86_64-disk.img --disk-format qcow2 --container-format bare --public
fi

# Create bad image
touch scenario-2-image.img
openstack image create scenario-2-image --file scenario-2-image.img --disk-format qcow2 --container-format bare --public

openstack network create scenario-2-network

openstack subnet create --network scenario-2-network scenario-2-subnet --subnet-range 192.168.200.0/24

openstack router create scenario-2-router

openstack router set --enable-snat --external-gateway {{ public_network }} scenario-2-router
openstack router add subnet scenario-2-router scenario-2-subnet

openstack flavor show m1.tiny > /dev/null 2> /dev/null || openstack flavor create m1.tiny --disk 1 --vcpus 1 --ram 64
openstack flavor show m1.medium > /dev/null 2> /dev/null || openstack flavor create m1.medium --disk 10 --vcpus 1 --ram 512

openstack security group create scenario-2-sg
openstack security group rule create --ingress --protocol icmp scenario-2-sg
openstack security group rule create --ingress --protocol tcp --dst-port 22 scenario-2-sg

openstack keypair create scenario-2-key > ~/scenario-2-key.pem
chmod 0600 ~/scenario-2-key.pem

openstack server create --flavor m1.medium --image scenario-2-image --nic net-id=scenario-2-network --key-name scenario-2-key --security-group scenario-2-sg scenario-2-vm --wait
openstack server show scenario-2-vm | grep -q "status.*ACTIVE"

port_id=$(openstack port list --server scenario-2-vm -c ID -f value | head)
fip=$(openstack floating ip create --port $port_id {{ public_network }} | grep floating_ip_address | awk '{ print $4 }')

echo "$fip"
